# coding: utf-8

"""
    DevCycle Bucketing API

    Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Feature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'key': 'str',
        'type': 'str',
        'variation': 'str',
        'variationKey': 'str',
        'variationName': 'str',
        'eval_reason': 'str'
    }

    attribute_map = {
        'id': '_id',
        'key': 'key',
        'type': 'type',
        'variation': '_variation',
        'variationKey': 'variationKey',
        'variationName': 'variationName',
        'eval_reason': 'evalReason'
    }

    def __init__(self, id=None, key=None, type=None, variation=None, variationKey=None, variationName=None, eval_reason=None):  # noqa: E501
        """Feature - a model defined in Swagger"""  # noqa: E501
        print("Feature.__init__",  variation, variationKey, variationName)
        self._id = None
        self._key = None
        self._type = None
        self._variation = None
        self._variationKey = None
        self._variationName = None
        self._eval_reason = None
        self.discriminator = None
        self.id = id
        self.key = key
        self.type = type
        self.variation = variation
        self.variationKey = variationKey
        self.variationName = variationName
        if eval_reason is not None:
            self.eval_reason = eval_reason

    @property
    def id(self):
        """Gets the id of this Feature.  # noqa: E501

        unique database id  # noqa: E501

        :return: The id of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.

        unique database id  # noqa: E501

        :param id: The id of this Feature.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def key(self):
        """Gets the key of this Feature.  # noqa: E501

        Unique key by Project, can be used in the SDK / API to reference by 'key' rather than _id.  # noqa: E501

        :return: The key of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Feature.

        Unique key by Project, can be used in the SDK / API to reference by 'key' rather than _id.  # noqa: E501

        :param key: The key of this Feature.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def type(self):
        """Gets the type of this Feature.  # noqa: E501

        Feature type  # noqa: E501

        :return: The type of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Feature.

        Feature type  # noqa: E501

        :param type: The type of this Feature.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["release", "experiment", "permission", "ops"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def variation(self):
        """Gets the variation ID of this Feature.  # noqa: E501

        Bucketed feature variation ID # noqa: E501

        :return: The variation ID of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation ID of this Feature.

        Bucketed feature variation ID # noqa: E501

        :param variation: The variation ID of this Feature.  # noqa: E501
        :type: str
        """
        if variation is None:
            raise ValueError("Invalid value for `variation`, must not be `None`")  # noqa: E501

        self._variation = variation

    @property
    def variationKey(self):
        """Gets the variation key of this Feature.

        Bucketed feature variation key   # noqa: E501

        :return: The variation key of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._variationKey

    @variationKey.setter
    def variationKey(self, variationKey):
        """Sets the variation key of this Feature.

        Bucketed feature variation key

        :param variationKey: The variation key of this Feature.  # noqa: E501
        :type: str
        """
        if variationKey is None:
            raise ValueError("Invalid value for `variationKey`, must not be `None`")  # noqa: E501

        self._variationKey = variationKey

    
    @property
    def variationName(self):
        """Gets the variation name of this Feature.

        Bucketed feature variation name   # noqa: E501

        :return: The variation name of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._variationName

    @variationName.setter
    def variationName(self, variationName):
        """Sets the variation name of this Feature.

        Bucketed feature variation name

        :param variationName: The variation name of this Feature.  # noqa: E501
        :type: str
        """
        if variationName is None:
            raise ValueError("Invalid value for `variationName`, must not be `None`")  # noqa: E501

        self._variationName = variationName

    @property
    def eval_reason(self):
        """Gets the eval_reason of this Feature.  # noqa: E501

        Evaluation reasoning  # noqa: E501

        :return: The eval_reason of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._eval_reason

    @eval_reason.setter
    def eval_reason(self, eval_reason):
        """Sets the eval_reason of this Feature.

        Evaluation reasoning  # noqa: E501

        :param eval_reason: The eval_reason of this Feature.  # noqa: E501
        :type: str
        """

        self._eval_reason = eval_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Feature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
