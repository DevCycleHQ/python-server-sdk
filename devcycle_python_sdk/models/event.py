# coding: utf-8

"""
    DevCycle Bucketing API

    Documents the DevCycle Bucketing API which provides and API interface to User Bucketing and for generated SDKs.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'target': 'str',
        '_date': 'float',
        'value': 'float',
        'meta_data': 'object'
    }

    attribute_map = {
        'type': 'type',
        'target': 'target',
        '_date': 'date',
        'value': 'value',
        'meta_data': 'metaData'
    }

    def __init__(self, type=None, target=None, _date=None, value=None, meta_data=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._target = None
        self.__date = None
        self._value = None
        self._meta_data = None
        self.discriminator = None
        self.type = type
        if target is not None:
            self.target = target
        if _date is not None:
            self._date = _date
        if value is not None:
            self.value = value
        if meta_data is not None:
            self.meta_data = meta_data

    @property
    def type(self):
        """Gets the type of this Event.  # noqa: E501

        Custom event type  # noqa: E501

        :return: The type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        Custom event type  # noqa: E501

        :param type: The type of this Event.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def target(self):
        """Gets the target of this Event.  # noqa: E501

        Custom event target / subject of event. Contextual to event type  # noqa: E501

        :return: The target of this Event.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Event.

        Custom event target / subject of event. Contextual to event type  # noqa: E501

        :param target: The target of this Event.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def _date(self):
        """Gets the _date of this Event.  # noqa: E501

        Unix epoch time the event occurred according to client  # noqa: E501

        :return: The _date of this Event.  # noqa: E501
        :rtype: float
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Event.

        Unix epoch time the event occurred according to client  # noqa: E501

        :param _date: The _date of this Event.  # noqa: E501
        :type: float
        """

        self.__date = _date

    @property
    def value(self):
        """Gets the value of this Event.  # noqa: E501

        Value for numerical events. Contextual to event type  # noqa: E501

        :return: The value of this Event.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Event.

        Value for numerical events. Contextual to event type  # noqa: E501

        :param value: The value of this Event.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def meta_data(self):
        """Gets the meta_data of this Event.  # noqa: E501

        Extra JSON metadata for event. Contextual to event type  # noqa: E501

        :return: The meta_data of this Event.  # noqa: E501
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Event.

        Extra JSON metadata for event. Contextual to event type  # noqa: E501

        :param meta_data: The meta_data of this Event.  # noqa: E501
        :type: object
        """

        self._meta_data = meta_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
